<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Console_AvailableCommands" xml:space="preserve">
    <value>The following commands are available:</value>
  </data>
  <data name="Console_CommandNotFound" xml:space="preserve">
    <value>Unknown command "{0}".</value>
  </data>
  <data name="IO_ErrorNoFileOpener" xml:space="preserve">
    <value>No method to open the file of type "{0}" could be found.  This type must either implement IOpenableFile or have a registered IFileOpener that supports this type.</value>
  </data>
  <data name="IO_ErrorReadOnly" xml:space="preserve">
    <value>Attempted to write to read-only file</value>
  </data>
  <data name="IO_FileNotFound" xml:space="preserve">
    <value>Could not find a file at the given path in the current I/O provider</value>
  </data>
  <data name="IO_GenericFile_ErrorLengthTooLarge" xml:space="preserve">
    <value>When the file is in memory, length cannot exceed int.MaxValue</value>
  </data>
  <data name="IO_GenericFile_ErrorNoSaveFilename" xml:space="preserve">
    <value>Using GenericFile.Save() requires GenericFile.Filename to not be null.</value>
  </data>
  <data name="IO_GenericFile_OutOfRange" xml:space="preserve">
    <value>Index "{0}" out of range.  Total length of file: "{1}".</value>
  </data>
  <data name="Project_ItemExistsAtPath" xml:space="preserve">
    <value>An item already exists at the given path</value>
  </data>
  <data name="Reflection_ErrorInvalidType" xml:space="preserve">
    <value>Invalid type supplied.  It should implement or inherit "{0}".</value>
  </data>
  <data name="Reflection_ErrorNoDefaultConstructor" xml:space="preserve">
    <value>The supplied type cannot be instatiated.  Please make sure it has a default constructor and is not an abstract class or interface.</value>
  </data>
  <data name="UI_AllFiles" xml:space="preserve">
    <value>All Files</value>
  </data>
  <data name="UI_ErrorActionMenuPathEmpty" xml:space="preserve">
    <value>A menu action's ActionPath must contain at least one element.</value>
  </data>
  <data name="UI_ErrorCantLoadSiblingViewModels" xml:space="preserve">
    <value>Cannot load sibling view models.</value>
  </data>
  <data name="UI_ErrorNoSiblingViewModelOfType" xml:space="preserve">
    <value>No sibling view model of type "{0}" could be found.</value>
  </data>
  <data name="Utilities_AsyncFor_ErrorNoConcurrentExecution" xml:space="preserve">
    <value>Only one AsyncFor operation can run at any one time.  To run another, create another instance of AsyncFor.</value>
  </data>
  <data name="Utilities_AsyncFor_ErrorStepCount0" xml:space="preserve">
    <value>Step count cannot be zero.</value>
  </data>
  <data name="UI_LoadingGeneric" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="UI_Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="UI_SupportedFiles" xml:space="preserve">
    <value>Supported Files</value>
  </data>
  <data name="UI_UnknownFileRegisterTemplate" xml:space="preserve">
    <value>{0} Files</value>
    <comment>Display name for IO filters that aren't registered.  {0} will be replaced by the upper case of the extension.</comment>
  </data>
  <data name="PluginDevExtAuthor" xml:space="preserve">
    <value>You!</value>
  </data>
  <data name="PluginDevExtDescription" xml:space="preserve">
    <value>All of the plugins that are placed in the development directory.</value>
  </data>
  <data name="PluginDevExtName" xml:space="preserve">
    <value>Development Plugins</value>
  </data>
  <data name="PluginDevExtVersion" xml:space="preserve">
    <value>0.0</value>
  </data>
  <data name="UI_ErrorLocalExtensionCollectionInstall" xml:space="preserve">
    <value>This IExtensionCollection lists extensions that are currently installed, not ones that can be installed, so this cannnot install extensions.</value>
  </data>
  <data name="UI_InstalledExtension" xml:space="preserve">
    <value>Installed Extensions</value>
  </data>
  <data name="File_SkyEditorProject" xml:space="preserve">
    <value>Sky Editor Project</value>
  </data>
  <data name="File_SkyEditorSolution" xml:space="preserve">
    <value>Sky Editor Solution</value>
  </data>
  <data name="Console_DirectoryDoesNotExist" xml:space="preserve">
    <value>Directory "{0}" does not exist</value>
  </data>
  <data name="Console_OpenFile_DuplicateChoose" xml:space="preserve">
    <value>Please enter the number of the prefered type: </value>
  </data>
  <data name="Console_OpenFile_DuplicateList" xml:space="preserve">
    <value>Duplicate potential file types found:</value>
  </data>
  <data name="Console_OpenFile_InputOutOfRange" xml:space="preserve">
    <value>The number you entered is out of range.</value>
  </data>
  <data name="Console_OpenFile_InvalidInput" xml:space="preserve">
    <value>Invalid input "{0}".</value>
  </data>
  <data name="Console_OpenFile_Usage" xml:space="preserve">
    <value>Usage: OpenFile &lt;Filename&gt; [Type]</value>
  </data>
  <data name="Console_SelectFile_InvalidInput" xml:space="preserve">
    <value>File Index must be a valid integer.</value>
  </data>
  <data name="Console_SelectFile_Usage" xml:space="preserve">
    <value>Usage: SelectFile &lt;File Index&gt;</value>
  </data>
  <data name="File_TextFile" xml:space="preserve">
    <value>Text Files</value>
  </data>
  <data name="Console_Settings_Usage" xml:space="preserve">
    <value>Usage: Settings &lt;Get|Set&gt; &lt;Key&gt; &lt;Value&gt;</value>
  </data>
  <data name="Console_DirectoryAlreadyExists" xml:space="preserve">
    <value>Directory already exists: "{0}"</value>
  </data>
  <data name="Console_mkdir_Usage" xml:space="preserve">
    <value>Usage: mkdir &lt;dir&gt;</value>
  </data>
  <data name="Console_Solution_NoneLoaded" xml:space="preserve">
    <value>No solution is loaded</value>
  </data>
  <data name="Console_Solution_Usage" xml:space="preserve">
    <value>Usage: Solution &lt;Create|Open&gt; OR Solution &lt;Any command to run&gt;</value>
  </data>
  <data name="Wizard_Console_NullCommand" xml:space="preserve">
    <value>This step does not have a console command defined and will be skipped.</value>
  </data>
  <data name="Wizard_StepDisplayName" xml:space="preserve">
    <value>Step {0} - {1}</value>
    <comment>{0} is the step number, and {1} is the friendly name</comment>
  </data>
  <data name="Console_Solution_Open_InvalidType" xml:space="preserve">
    <value>Invalid solution file</value>
  </data>
  <data name="UI_FileViewModel_NullTitle" xml:space="preserve">
    <value>(Unknown)</value>
  </data>
</root>